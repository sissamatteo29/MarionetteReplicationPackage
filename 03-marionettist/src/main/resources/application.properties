# Server configuration
server.port=8080
server.servlet.context-path=/

# Enable CORS for development (remove in production)
spring.web.cors.allowed-origins=http://localhost:3000
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*

# Static resource handling
spring.web.resources.static-locations=classpath:/static/
spring.web.resources.cache.cachecontrol.max-age=0

# Logging
logging.level.org.marionette.controlplane=DEBUG

# CORS Configuration (for development)
management.endpoints.web.cors.allowed-origins=http://localhost:3000
management.endpoints.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
management.endpoints.web.cors.allowed-headers=*

# Logging Configuration
logging.level.org.marionette.controlplane=DEBUG
logging.level.org.springframework.web.client.RestTemplate=DEBUG
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n

# Jackson Configuration
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.serialization.indent-output=true

# HTTP Client Configuration
spring.http.client.connect-timeout=10s
spring.http.client.read-timeout=30s

# Actuator Configuration (for health checks)
management.endpoints.web.exposure.include=health,info,prometheus
management.endpoint.health.show-details=always

# Application Info
info.app.name=Marionette Control Plane
info.app.description=Control plane for managing microservice behavior configurations with real-time metrics
info.app.version=1.0.0


# Metrics Configuration
marionette.metrics.enabled=true
marionette.metrics.default-time-range-minutes=15
marionette.metrics.default-step=30s

# Custom metric queries - Override defaults or add new ones
# Format: marionette.metrics.queries.{metric-key}.{property}

# JVM Memory (works with Spring Boot Actuator + Micrometer)
# marionette.metrics.queries.jvm_memory.display-name=JVM Memory Usage
# marionette.metrics.queries.jvm_memory.query=jvm_memory_used_bytes{job=~".*{service}.*",area="heap"}
# marionette.metrics.queries.jvm_memory.unit=bytes
# marionette.metrics.queries.jvm_memory.description=JVM heap memory usage
# marionette.metrics.queries.jvm_memory.enabled=true

# # JVM GC
# marionette.metrics.queries.jvm_gc.display-name=GC Collection Time
# marionette.metrics.queries.jvm_gc.query=rate(jvm_gc_collection_seconds_total{job=~".*{service}.*"}[1m])
# marionette.metrics.queries.jvm_gc.unit=s/s
# marionette.metrics.queries.jvm_gc.description=Garbage collection time per second
# marionette.metrics.queries.jvm_gc.enabled=true

# # HTTP requests (if using Spring Boot Actuator with web metrics)
# marionette.metrics.queries.http_requests.display-name=HTTP Request Rate
# marionette.metrics.queries.http_requests.query=rate(http_server_requests_seconds_count{job=~".*{service}.*"}[1m])
# marionette.metrics.queries.http_requests.unit=req/s
# marionette.metrics.queries.http_requests.description=HTTP requests per second
# marionette.metrics.queries.http_requests.enabled=true

# # HTTP request duration
# marionette.metrics.queries.http_duration.display-name=HTTP Response Time
# marionette.metrics.queries.http_duration.query=histogram_quantile(0.95, rate(http_server_requests_seconds_bucket{job=~".*{service}.*"}[1m]))
# marionette.metrics.queries.http_duration.unit=seconds
# marionette.metrics.queries.http_duration.description=95th percentile response time
# marionette.metrics.queries.http_duration.enabled=true

# # Process CPU
# marionette.metrics.queries.cpu_usage.display-name=CPU Usage
# marionette.metrics.queries.cpu_usage.query=rate(process_cpu_seconds_total{job=~".*{service}.*"}[1m])
# marionette.metrics.queries.cpu_usage.unit=%
# marionette.metrics.queries.cpu_usage.description=Process CPU usage percentage
# marionette.metrics.queries.cpu_usage.enabled=true

# # Container metrics (if available)
# marionette.metrics.queries.container_memory.display-name=Container Memory
# marionette.metrics.queries.container_memory.query=container_memory_usage_bytes{container=~".*{service}.*"}
# marionette.metrics.queries.container_memory.unit=bytes
# marionette.metrics.queries.container_memory.description=Container memory usage
# marionette.metrics.queries.container_memory.enabled=false

# # Disable default queries that don't work
# marionette.metrics.queries.response_time.enabled=false
# marionette.metrics.queries.request_rate.enabled=false
# marionette.metrics.queries.error_rate.enabled=false